name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-review:
    runs-on: self-hosted
    # Only run on PRs or when triggered by comment on PR
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request != null)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup PR context
      id: setup
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Initialize all required files with safe defaults
          fs.writeFileSync('event_name.txt', context.eventName);
          fs.writeFileSync('repo.txt', context.repo.owner + '/' + context.repo.repo);
          
          if (context.eventName === 'issue_comment') {
            // For comment triggers
            const prNumber = context.payload.issue.number;
            fs.writeFileSync('pr_number.txt', String(prNumber));
            fs.writeFileSync('comment_body.txt', context.payload.comment.body || '');
            fs.writeFileSync('comment_author.txt', context.payload.comment.user.login || 'unknown');
            
            // Check if comment mentions Claude
            const commentBody = context.payload.comment.body || '';
            if (!commentBody.match(/@claude|\/claude/)) {
              console.log('Comment does not mention @claude or /claude, skipping');
              fs.writeFileSync('skip_review.txt', 'true');
              return;
            }
            fs.writeFileSync('skip_review.txt', 'false');
            
            // Check for auto-fix mode
            const autoFix = !!(commentBody.match(/--fix|and fix|auto-fix|--auto-fix/));
            fs.writeFileSync('auto_fix.txt', String(autoFix));
            
            // Get PR details
            try {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              fs.writeFileSync('base_branch.txt', pr.base.ref);
              fs.writeFileSync('head_branch.txt', pr.head.ref);
              fs.writeFileSync('base_sha.txt', pr.base.sha);
              fs.writeFileSync('head_sha.txt', pr.head.sha);
              fs.writeFileSync('pr_title.txt', pr.title || '');
              fs.writeFileSync('pr_body.txt', pr.body || '');
            } catch (e) {
              console.error('Failed to get PR details:', e);
              fs.writeFileSync('skip_review.txt', 'true');
            }
          } else {
            // For PR triggers
            const pr = context.payload.pull_request;
            fs.writeFileSync('pr_number.txt', String(pr.number));
            fs.writeFileSync('base_branch.txt', pr.base.ref);
            fs.writeFileSync('head_branch.txt', pr.head.ref);
            fs.writeFileSync('base_sha.txt', pr.base.sha);
            fs.writeFileSync('head_sha.txt', pr.head.sha);
            fs.writeFileSync('pr_title.txt', pr.title || '');
            fs.writeFileSync('pr_body.txt', pr.body || '');
            fs.writeFileSync('pr_author.txt', pr.user.login || 'unknown');
            fs.writeFileSync('auto_fix.txt', 'false');
            fs.writeFileSync('skip_review.txt', 'false');
            fs.writeFileSync('comment_body.txt', '');
          }

    - name: Check if should skip
      id: check_skip
      run: |
        SKIP_REVIEW=""; [ -f skip_review.txt ] && read -r SKIP_REVIEW < skip_review.txt
        if [ "$SKIP_REVIEW" = "true" ]; then
          echo "Skipping review"
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout PR branch for comment triggers
      if: steps.check_skip.outputs.skip != 'true' && github.event_name == 'issue_comment'
      env:
        GH_TOKEN: ${{ secrets.CLAUDE }}
      run: |
        PR_NUMBER=""; [ -f pr_number.txt ] && read -r PR_NUMBER < pr_number.txt
        echo "Setting up PR #${PR_NUMBER} for comment trigger"
        
        # Use GitHub CLI which handles auth better
        gh pr checkout ${PR_NUMBER}
        
        # Verify we're on the right branch
        HEAD_BRANCH=""; [ -f head_branch.txt ] && read -r HEAD_BRANCH < head_branch.txt
        echo "Checked out branch: ${HEAD_BRANCH}"
    
    - name: Get PR diff
      if: steps.check_skip.outputs.skip != 'true'
      id: diff
      run: |
        EVENT_NAME=""; [ -f event_name.txt ] && read -r EVENT_NAME < event_name.txt
        
        # Determine if this is a comment trigger or regular PR
        if [ "${EVENT_NAME}" = "issue_comment" ]; then
          # For comment triggers, we already checked out the PR branch
          echo "Getting diff for comment trigger"
          
          # Get base branch from file
          BASE_BRANCH=""; [ -f base_branch.txt ] && read -r BASE_BRANCH < base_branch.txt
          
          # Ensure we have the latest base branch
          git fetch origin "${BASE_BRANCH}"
          
          # Get the diff between base and current HEAD
          echo "Comparing origin/${BASE_BRANCH}...HEAD"
          git diff "origin/${BASE_BRANCH}...HEAD" > pr_diff.txt || {
            echo "Failed to get diff, trying alternative method"
            git diff "origin/${BASE_BRANCH}" HEAD > pr_diff.txt
          }
          git diff --name-only "origin/${BASE_BRANCH}...HEAD" > changed_files.txt || {
            git diff --name-only "origin/${BASE_BRANCH}" HEAD > changed_files.txt
          }
        else
          # Regular PR trigger - use SHAs from files
          BASE_SHA=""; [ -f base_sha.txt ] && read -r BASE_SHA < base_sha.txt
          HEAD_SHA=""; [ -f head_sha.txt ] && read -r HEAD_SHA < head_sha.txt
          echo "Getting diff for PR trigger"
          git diff "${BASE_SHA}..${HEAD_SHA}" > pr_diff.txt
          git diff --name-only "${BASE_SHA}..${HEAD_SHA}" > changed_files.txt
        fi
        
        # Limit diff size to avoid API limits (max ~8000 tokens)
        head -n 500 pr_diff.txt > pr_diff_limited.txt
        
        # Create a summary
        echo "Changed files:" > pr_summary.txt
        cat changed_files.txt >> pr_summary.txt
        echo -e "\n\nDiff preview (first 500 lines):" >> pr_summary.txt
        cat pr_diff_limited.txt >> pr_summary.txt
    
    - name: Check Claude Code CLI
      if: steps.check_skip.outputs.skip != 'true'
      run: |
        # Check if Claude Code CLI is available
        if ! command -v claude &> /dev/null; then
          echo "Claude Code CLI not found. Please install it on the self-hosted runner:"
          echo "See: https://docs.anthropic.com/en/docs/claude-code/quickstart"
          exit 1
        fi
        
        # Check Claude Code version and authentication
        claude --version
        echo "Claude Code CLI is available and ready to use with your subscription"
    
    - name: Review with Claude Code
      if: steps.check_skip.outputs.skip != 'true'
      id: claude_review
      run: |
        # Read all context from files
        # Read variables safely without command substitution
        EVENT_NAME=""; [ -f event_name.txt ] && read -r EVENT_NAME < event_name.txt
        AUTO_FIX=""; [ -f auto_fix.txt ] && read -r AUTO_FIX < auto_fix.txt
        COMMENT_BODY=""; [ -f comment_body.txt ] && read -r COMMENT_BODY < comment_body.txt
        TITLE=""; [ -f pr_title.txt ] && read -r TITLE < pr_title.txt
        DESCRIPTION=""; [ -f pr_body.txt ] && read -r DESCRIPTION < pr_body.txt
        
        # Determine trigger type
        if [ "${EVENT_NAME}" = "issue_comment" ]; then
          TRIGGER_TYPE="comment"
        else
          TRIGGER_TYPE="pr"
        fi
        
        # Save AUTO_FIX for later steps
        echo "AUTO_FIX=$AUTO_FIX" >> $GITHUB_ENV
        
        # Create review prompt based on mode
        if [ "$AUTO_FIX" = "true" ]; then
          printf '%s\n' \
            'You are a senior software engineer with access to file editing tools. Analyze this pull request and:' \
            '' \
            '1. First, provide a brief review of the changes' \
            '2. Then, actively use the Edit or Write tools to fix any issues you find:' \
            '   - Fix code quality issues' \
            '   - Resolve potential bugs' \
            '   - Improve performance' \
            '   - Apply security best practices' \
            '   - Refactor code following best practices' \
            '' \
            'IMPORTANT: You have access to Edit and Write tools. Use them to make the necessary changes directly to the files.' \
            '' \
            'After making fixes, review the changes again and provide a summary of what you fixed.' \
            '' > review_prompt.txt
          echo "Trigger: $TRIGGER_TYPE (AUTO-FIX MODE ENABLED)" >> review_prompt.txt
        else
          printf '%s\n' \
            'You are a senior code reviewer. Please review this pull request and provide constructive feedback.' \
            '' \
            'Focus on:' \
            '1. Code quality and best practices' \
            '2. Potential bugs or issues' \
            '3. Security concerns' \
            '4. Performance considerations' \
            '5. Suggestions for improvement' \
            '' \
            'Be specific and actionable in your feedback. If the code looks good, say so!' \
            '' > review_prompt.txt
          echo "Trigger: $TRIGGER_TYPE" >> review_prompt.txt
        fi
        
        # Add context from files - use printf to prevent code injection
        if [ "$TRIGGER_TYPE" = "comment" ] && [ -n "$COMMENT_BODY" ]; then
          echo "" >> review_prompt.txt
          echo "Comment: " >> review_prompt.txt
          printf '%s\n' "$COMMENT_BODY" >> review_prompt.txt
        fi
        
        echo "" >> review_prompt.txt
        printf 'PR Title: %s\n' "$TITLE" >> review_prompt.txt
        echo "" >> review_prompt.txt
        echo "PR Description: " >> review_prompt.txt
        printf '%s\n' "$DESCRIPTION" >> review_prompt.txt
        echo "" >> review_prompt.txt
        echo "Changes:" >> review_prompt.txt
        cat pr_summary.txt >> review_prompt.txt
        
        # Get review from Claude Code CLI
        if [ "$AUTO_FIX" = "true" ]; then
          # Run Claude without --print to allow file modifications
          # Use file input to avoid command substitution issues
          claude < review_prompt.txt 2>&1 | tee claude_review.md
        else
          # For review-only mode, use --print with file input
          claude --print < review_prompt.txt > claude_review.md 2>&1
        fi
        
        # Check if review was successful
        if [ $? -ne 0 ]; then
          echo "Error: Claude Code review failed"
          echo "Failed to get review from Claude Code CLI" > claude_review.md
        fi
    
    - name: Commit auto-fixes (if any)
      if: steps.check_skip.outputs.skip != 'true' && env.AUTO_FIX == 'true'
      env:
        GH_TOKEN: ${{ secrets.CLAUDE }}
      run: |
        # Configure git for the runner
        git config user.name "claude-autofix[bot]"
        git config user.email "claude-autofix[bot]@users.noreply.github.com"
        
        # Check if there are any changes to commit
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes made by Claude"
        else
          echo "Changes detected, committing auto-fixes..."
          
          # Stage all changes
          git add -A
          
          # Get commit author from file
          EVENT_NAME=""; [ -f event_name.txt ] && read -r EVENT_NAME < event_name.txt
          if [ "${EVENT_NAME}" = "issue_comment" ]; then
            COMMIT_AUTHOR="unknown"; [ -f comment_author.txt ] && read -r COMMIT_AUTHOR < comment_author.txt
          else
            COMMIT_AUTHOR="unknown"; [ -f pr_author.txt ] && read -r COMMIT_AUTHOR < pr_author.txt
          fi
          
          # Commit with descriptive message
          COMMIT_MSG="🤖 Auto-fix: Apply Claude's code improvements"$'\n\n'"Applied automatic fixes suggested by Claude Code Review:"$'\n'"- Code quality improvements"$'\n'"- Bug fixes and security enhancements"$'\n'"- Performance optimizations"$'\n'"- Best practice implementations"$'\n\n'"Triggered by: ${COMMIT_AUTHOR}"
          git commit -m "${COMMIT_MSG}"
          
          # Push changes to the PR branch
          HEAD_BRANCH=""; [ -f head_branch.txt ] && read -r HEAD_BRANCH < head_branch.txt
          git push origin "HEAD:${HEAD_BRANCH}"
          
          echo "Auto-fixes committed and pushed!"
        fi
    
    - name: Post review comment
      if: steps.check_skip.outputs.skip != 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const review = fs.readFileSync('claude_review.md', 'utf8');
          const autoFix = fs.readFileSync('auto_fix.txt', 'utf8').trim() === 'true';
          const eventName = fs.readFileSync('event_name.txt', 'utf8').trim();
          const prNumber = parseInt(fs.readFileSync('pr_number.txt', 'utf8').trim());
          
          const triggerInfo = eventName === 'issue_comment' ? 
            '\n\n---\n*Triggered by comment' + (autoFix ? ' (auto-fix mode)' : '') + '*' :
            '\n\n---\n*Automated review on PR update*';
          
          const commentBody = '## 🤖 Claude Code Review\n\n' + review + triggerInfo;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: commentBody
          });
