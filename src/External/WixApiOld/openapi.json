{
  "openapi": "3.0.3",
  "info": {
    "title": "Wix REST API",
    "description": "OpenAPI specification for Wix REST API covering Blog, Store (Products), Orders, Members, Contacts, Bookings, Events, Forms, Inbox, and other modules.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://www.wixapis.com",
      "description": "Wix API base URL for all endpoints"
    }
  ],
  "components": {
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://www.wix.com/oauth/authorize",
            "tokenUrl": "https://www.wix.com/oauth/access",
            "scopes": {
              "manage:site": "Full control of the Wix site data",
              "read:site": "Read-only access to the Wix site data",
              "manage_inbox_messages": "Manage Inbox messages (send messages, create conversations)",
              "read_inbox_messages": "Read Inbox messages",
              "manage_stores": "Manage stores data (e.g., needed for some Inbox actions related to store orders)"
            }
          }
        }
      },
      "APIKeyAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "API Key for site-level or account-level access. Include `wix-site-id` or `wix-account-id` header as appropriate."
      }
    },
    "schemas": {
      "BlogPost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Post ID (GUID)"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "type": "string"
          }
        }
      },
      "BlogPostList": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlogPost"
            }
          },
          "paging": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer"
              },
              "offset": {
                "type": "integer"
              },
              "next": {
                "type": "string"
              }
            }
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID (GUID)"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "inStock": {
            "type": "boolean"
          }
        }
      },
      "ProductList": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "paging": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer"
              },
              "offset": {
                "type": "integer"
              },
              "next": {
                "type": "string"
              }
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Order ID"
          },
          "number": {
            "type": "string",
            "description": "Order number"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currency": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "productId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "quantity": {
                  "type": "integer"
                },
                "price": {
                  "type": "number"
                }
              }
            }
          },
          "totalPrice": {
            "type": "number"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Member ID (GUID)"
          },
          "loginEmail": {
            "type": "string",
            "format": "email"
          },
          "status": {
            "type": "string",
            "description": "Member status (ACTIVE/BLOCKED/etc.)"
          },
          "contactId": {
            "type": "string",
            "description": "Linked Contact ID (GUID)"
          },
          "profile": {
            "type": "object",
            "properties": {
              "nickname": {
                "type": "string"
              },
              "picture": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Contact ID (GUID)"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the contact was created."
          },
          "revision": {
            "type": "integer",
            "description": "Revision number, which increments by 1 each time the contact is updated. Must specify existing revision when updating the contact to avoid conflicting changes."
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the contact was last updated."
          },
          "lastActivity": {
            "$ref": "#/components/schemas/LastActivity"
          },
          "primaryInfo": {
            "$ref": "#/components/schemas/PrimaryInfo"
          },
          "info": {
            "$ref": "#/components/schemas/Info"
          },
          "primaryEmail": {
            "$ref": "#/components/schemas/PrimaryEmail"
          },
          "primaryPhone": {
            "$ref": "#/components/schemas/PrimaryPhone"
          }
        }
      },
      "Booking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Booking ID"
          },
          "status": {
            "type": "string",
            "description": "Booking status (e.g. CONFIRMED, PENDING)"
          },
          "serviceId": {
            "type": "string"
          },
          "slot": {
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "type": "string",
                "format": "date-time"
              },
              "timezone": {
                "type": "string"
              }
            }
          },
          "customer": {
            "type": "object",
            "properties": {
              "contactId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Event ID (GUID)"
          },
          "title": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Event status (DRAFT/PUBLISHED)"
          }
        }
      },
      "FormSubmission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Submission ID (GUID)"
          },
          "formId": {
            "type": "string",
            "description": "Form (namespace) ID"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Submitted field values (keyed by field name or ID)"
          },
          "status": {
            "type": "string",
            "description": "Submission status (e.g., CONFIRMED)"
          }
        }
      },
      "Participant": {
        "type": "object",
        "properties": {
          "anonymousVisitorId": {
            "type": "string"
          },
          "contactId": {
            "type": "string"
          },
          "memberId": {
            "type": "string"
          }
        }
      },
      "DisplayData": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          }
        }
      },
      "Badge": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        }
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "participant": {
            "$ref": "#/components/schemas/Participant"
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "businessDisplayData": {
            "$ref": "#/components/schemas/DisplayData"
          },
          "participantDisplayData": {
            "$ref": "#/components/schemas/DisplayData"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "content": {
            "type": "object"
          },
          "sender": {
            "$ref": "#/components/schemas/Participant"
          },
          "badges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Badge"
            }
          },
          "targetChannels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sourceChannel": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "BUSINESS_AND_PARTICIPANT",
              "BUSINESS"
            ]
          },
          "sequence": {
            "type": "integer"
          },
          "direction": {
            "type": "string",
            "enum": [
              "BUSINESS_TO_PARTICIPANT",
              "PARTICIPANT_TO_BUSINESS"
            ]
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "sourceType": {
            "type": "string",
            "description": "Origin of the contact's creation (e.g., ADMIN, API, OTHER)."
          }
        }
      },
      "LastActivity": {
        "type": "object",
        "properties": {
          "activityDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the contact's last activity."
          },
          "activityType": {
            "type": "string",
            "description": "Type of the last activity (e.g., CONTACT_CREATED, MEMBER_LOGIN, etc.)."
          }
        }
      },
      "PrimaryInfo": {
        "type": "object",
        "description": "Contact's primary phone and email.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "PrimaryEmail": {
        "type": "object",
        "description": "Contact's primary email details.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "subscriptionStatus": {
            "type": "string",
            "description": "Recipient's subscription status for emails."
          },
          "deliverabilityStatus": {
            "type": "string",
            "description": "Deliverability status of this email address (e.g., whether emails bounce)."
          }
        }
      },
      "PrimaryPhone": {
        "type": "object",
        "description": "Contact's primary phone details.",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Country code of the phone number in ISO-3166 alpha-2 format."
          },
          "e164Phone": {
            "type": "string",
            "description": "Phone number in ITU E.164 format."
          },
          "formattedPhone": {
            "type": "string",
            "description": "Formatted phone number."
          },
          "subscriptionStatus": {
            "type": "string",
            "description": "Opt-in/opt-out status for SMS messages (default is NOT_SET for valid numbers)."
          },
          "phone": {
            "type": "string",
            "description": "Primary phone number."
          }
        }
      },
      "Info": {
        "type": "object",
        "description": "Contact's detailed information, including additional emails, phones, addresses, etc.",
        "properties": {
          "name": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string"
              },
              "last": {
                "type": "string"
              }
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "tag": {
                  "type": "string"
                },
                "primary": {
                  "type": "boolean"
                }
              }
            }
          },
          "phones": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone": {
                  "type": "string"
                },
                "countryCode": {
                  "type": "string"
                },
                "e164Phone": {
                  "type": "string"
                },
                "formattedPhone": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                },
                "primary": {
                  "type": "boolean"
                }
              }
            }
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "subdivision": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "postalCode": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PagingMetadata": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of items returned in this response."
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "description": "The offset which was requested."
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of items that match the query."
          },
          "tooManyToCount": {
            "type": "boolean",
            "description": "True if the server could not calculate the total number of items."
          }
        }
      },
      "ContactList": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "pagingMetadata": {
            "$ref": "#/components/schemas/PagingMetadata"
          }
        }
      },
      "MemberList": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "pagingMetadata": {
            "$ref": "#/components/schemas/PagingMetadata"
          }
        }
      },
      "LabelContactRequest": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 2000
          }
        }
      }
    }
  },
  "security": [
    {
      "OAuth2": []
    }
  ],
  "paths": {
    "/blog/v3/posts": {
      "get": {
        "tags": [
          "Blog"
        ],
        "summary": "List Blog Posts",
        "description": "Retrieves a list of blog posts.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of blog posts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostList"
                }
              }
            }
          }
        }
      }
    },
    "/blog/v3/posts/{postId}": {
      "get": {
        "tags": [
          "Blog"
        ],
        "summary": "Get Blog Post",
        "description": "Retrieves a blog post by ID.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Post ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    },
    "/blog/v3/posts/slugs/{slug}": {
      "get": {
        "tags": [
          "Blog"
        ],
        "summary": "Get Blog Post by Slug",
        "description": "Retrieves a blog post by its slug (SEO-friendly URL identifier).",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Post slug"
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPost"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    },
    "/stores/v1/products": {
      "post": {
        "tags": [
          "Stores"
        ],
        "summary": "Create Product",
        "description": "Creates a new product in the store.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Product object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/stores/v1/products/query": {
      "post": {
        "tags": [
          "Stores"
        ],
        "summary": "Query Products",
        "description": "Queries products with filters (e.g., by inventory status, price range).",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Product query filter",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "object"
                  },
                  "sort": {
                    "type": "object"
                  },
                  "paging": {
                    "type": "object",
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "offset": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query results of products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductList"
                }
              }
            }
          }
        }
      }
    },
    "/stores/v1/products/{productId}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get Product",
        "description": "Retrieves a product by its ID.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": [
          "Stores"
        ],
        "summary": "Update Product",
        "description": "Updates an existing product's information (fields that are writable via the API).",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "requestBody": {
          "description": "Product fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stores"
        ],
        "summary": "Delete Product",
        "description": "Deletes a product from the catalog.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Product ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted successfully (no content)"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/ecom/v1/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create Order",
        "description": "Creates a new eCommerce order record.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Order object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/ecom/v1/orders/search": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Search Orders",
        "description": "Searches for orders matching the given criteria (filter by status, date, etc.).",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Order search filters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "object"
                  },
                  "sort": {
                    "type": "object"
                  },
                  "paging": {
                    "type": "object",
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "offset": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "paging": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ecom/v1/orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order",
        "description": "Retrieves an order by ID.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Order object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/ecom/v1/orders/{orderId}/cancel": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel Order",
        "description": "Cancels an existing order.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Order ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Order canceled (no content)"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/members/v1/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List Members",
        "description": "Lists site members. Supports pagination and field projection.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "Maximum number of members to return."
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Offset for pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "List of members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Create Member",
        "description": "Creates a new member for the site. Typically used to invite a user or convert a contact into a member.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Member object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "loginEmail": {
                    "type": "string",
                    "format": "email"
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "nickname": {
                        "type": "string"
                      }
                    }
                  },
                  "contactDetails": {
                    "type": "object",
                    "description": "Optional contact info to link"
                  }
                },
                "required": [
                  "loginEmail"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Member created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "409": {
            "description": "Email already in use or other conflict"
          }
        }
      }
    },
    "/members/v1/members/{memberId}": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get Member",
        "description": "Retrieves a site member by ID.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Member ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Member object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "404": {
            "description": "Member not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Members"
        ],
        "summary": "Update Member",
        "description": "Updates a member's information (e.g., profile details or status).",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Member ID"
          }
        ],
        "requestBody": {
          "description": "Member fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Member"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "404": {
            "description": "Member not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete Member",
        "description": "Removes a member from the site (the associated contact may remain).",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Member ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Member deleted (no content)"
          },
          "404": {
            "description": "Member not found"
          }
        }
      }
    },
    "/contacts/v4/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List Contacts",
        "description": "Lists contacts in the site's CRM (address book). Supports pagination.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create Contact",
        "description": "Creates a new contact in the site's CRM.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Contact object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "phone": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v4/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get Contact",
        "description": "Retrieves a contact by ID.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update Contact",
        "description": "Updates a contact's information.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          }
        ],
        "requestBody": {
          "description": "Contact fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete Contact",
        "description": "Deletes a contact.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Contact deleted (no content)"
          },
          "404": {
            "description": "Contact not found"
          }
        }
      }
    },
    "/_api/bookings-service/v2/bookings": {
      "post": {
        "tags": [
          "Bookings"
        ],
        "summary": "Create Booking",
        "description": "Creates a new booking (appointment or class enrollment).",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Booking object to create (including service, slot, and participant info)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Booking"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Invalid booking (e.g. slot unavailable)"
          }
        }
      }
    },
    "/_api/bookings-service/v2/bookings/{bookingId}/cancel": {
      "post": {
        "tags": [
          "Bookings"
        ],
        "summary": "Cancel Booking",
        "description": "Cancels an existing booking (if allowed by booking policy).",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Booking ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking canceled"
          },
          "404": {
            "description": "Booking not found or cannot be canceled"
          }
        }
      }
    },
    "/_api/bookings-service/v2/bookings/{bookingId}/confirm": {
      "post": {
        "tags": [
          "Bookings"
        ],
        "summary": "Confirm Booking",
        "description": "Marks a booking as confirmed (if awaiting confirmation).",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Booking ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking confirmed"
          },
          "404": {
            "description": "Booking not found or cannot be confirmed"
          }
        }
      }
    },
    "/events/v3/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List Events",
        "description": "Lists events in the site.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "paging": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/v3/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get Event",
        "description": "Retrieves an event by ID.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Event ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Event object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/events/v1/events/{eventId}/orders/confirm": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Confirm Event Order",
        "description": "Confirms an order (RSVP or ticket purchase) for an event.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Event ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Order confirmed"
          },
          "404": {
            "description": "Event or order not found"
          }
        }
      }
    },
    "/form-submission-service/v4/submissions": {
      "post": {
        "tags": [
          "Forms"
        ],
        "summary": "Submit Form",
        "description": "Submits a form data entry.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Form submission data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormSubmission"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Form submission received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormSubmission"
                }
              }
            }
          }
        }
      }
    },
    "/form-submission-service/v4/submissions/{submissionId}": {
      "get": {
        "tags": [
          "Forms"
        ],
        "summary": "Get Form Submission",
        "description": "Retrieves a form submission by ID.",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Submission ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Form submission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormSubmission"
                }
              }
            }
          },
          "404": {
            "description": "Submission not found"
          }
        }
      }
    },
    "/form-submission-service/v4/submissions/query": {
      "post": {
        "tags": [
          "Forms"
        ],
        "summary": "Query Form Submissions",
        "description": "Queries form submissions with filtering (e.g., by formId, date).",
        "security": [
          {
            "OAuth2": [
              "read:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Submission query filter",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "object"
                  },
                  "sort": {
                    "type": "object"
                  },
                  "paging": {
                    "type": "object",
                    "properties": {
                      "limit": {
                        "type": "integer"
                      },
                      "offset": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query results of submissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "submissions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FormSubmission"
                      }
                    },
                    "paging": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inbox/v2/conversations/{conversationId}": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get Conversation",
        "description": "Retrieves a conversation by its unique conversation ID.",
        "security": [
          {
            "OAuth2": [
              "manage_inbox_messages"
            ]
          },
          {
            "OAuth2": [
              "read_inbox_messages"
            ]
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "description": "Conversation ID (GUID) of the conversation to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the requested conversation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation": {
                      "$ref": "#/components/schemas/Conversation"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/inbox/v2/conversations": {
      "post": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get or Create Conversation",
        "description": "Retrieves or creates a conversation by participant ID.",
        "security": [
          {
            "OAuth2": [
              "manage_inbox_messages",
              "manage_stores"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "participantId": {
                    "type": "object",
                    "properties": {
                      "anonymousVisitorId": {
                        "type": "string"
                      },
                      "contactId": {
                        "type": "string"
                      },
                      "memberId": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "participantId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation": {
                      "$ref": "#/components/schemas/Conversation"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/inbox/v2/messages": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "List Messages",
        "description": "Retrieves messages in a conversation.",
        "security": [
          {
            "OAuth2": [
              "manage_inbox_messages",
              "manage_stores"
            ]
          },
          {
            "OAuth2": [
              "read_inbox_messages",
              "manage_stores"
            ]
          }
        ],
        "parameters": [
          {
            "name": "conversationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paging.cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "BUSINESS_AND_PARTICIPANT",
                "BUSINESS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      }
                    },
                    "pagingMetadata": {
                      "type": "object",
                      "properties": {
                        "cursors": {
                          "type": "object",
                          "properties": {
                            "next": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Inbox"
        ],
        "summary": "Send Message",
        "description": "Sends a message in a conversation.",
        "security": [
          {
            "OAuth2": [
              "manage_inbox_messages"
            ]
          }
        ],
        "parameters": [
          {
            "name": "sendAs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conversationId": {
                    "type": "string"
                  },
                  "message": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "object"
                      },
                      "visibility": {
                        "type": "string",
                        "enum": [
                          "BUSINESS_AND_PARTICIPANT",
                          "BUSINESS"
                        ]
                      },
                      "direction": {
                        "type": "string",
                        "enum": [
                          "BUSINESS_TO_PARTICIPANT",
                          "PARTICIPANT_TO_BUSINESS"
                        ]
                      },
                      "targetChannels": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "content",
                      "visibility",
                      "direction"
                    ]
                  }
                },
                "required": [
                  "conversationId",
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "$ref": "#/components/schemas/Message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v4/contacts/{contactId}/labels": {
      "post": {
        "operationId": "contactLabel",
        "tags": [
          "Contacts"
        ],
        "summary": "Label Contact",
        "description": "Adds one or more existing labels to a contact.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          }
        ],
        "requestBody": {
          "description": "Object containing labels to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelContactRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Labels added to contact (no content)"
          }
        }
      }
    },
    "/contacts/v4/contacts/{contactId}/labels/{labelKey}": {
      "delete": {
        "operationId": "contactUnlabel",
        "tags": [
          "Contacts"
        ],
        "summary": "Unlabel Contact",
        "description": "Removes a label from a contact.",
        "security": [
          {
            "OAuth2": [
              "manage:site"
            ]
          },
          {
            "APIKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          },
          {
            "name": "labelKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Label key"
          }
        ],
        "responses": {
          "204": {
            "description": "Label removed from contact (no content)"
          }
        }
      }
    }
  }
}