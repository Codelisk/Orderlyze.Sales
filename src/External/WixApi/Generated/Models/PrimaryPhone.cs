// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace MyApi.Client.Models
{
    /// <summary>
    /// Contact&apos;s primary phone details.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PrimaryPhone : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Country code of the phone number in ISO-3166 alpha-2 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>Phone number in ITU E.164 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? E164Phone { get; set; }
#nullable restore
#else
        public string E164Phone { get; set; }
#endif
        /// <summary>Formatted phone number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormattedPhone { get; set; }
#nullable restore
#else
        public string FormattedPhone { get; set; }
#endif
        /// <summary>Primary phone number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>Opt-in/opt-out status for SMS messages (default is NOT_SET for valid numbers).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubscriptionStatus { get; set; }
#nullable restore
#else
        public string SubscriptionStatus { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::MyApi.Client.Models.PrimaryPhone"/> and sets the default values.
        /// </summary>
        public PrimaryPhone()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::MyApi.Client.Models.PrimaryPhone"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::MyApi.Client.Models.PrimaryPhone CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::MyApi.Client.Models.PrimaryPhone();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "countryCode", n => { CountryCode = n.GetStringValue(); } },
                { "e164Phone", n => { E164Phone = n.GetStringValue(); } },
                { "formattedPhone", n => { FormattedPhone = n.GetStringValue(); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "subscriptionStatus", n => { SubscriptionStatus = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("countryCode", CountryCode);
            writer.WriteStringValue("e164Phone", E164Phone);
            writer.WriteStringValue("formattedPhone", FormattedPhone);
            writer.WriteStringValue("phone", Phone);
            writer.WriteStringValue("subscriptionStatus", SubscriptionStatus);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
