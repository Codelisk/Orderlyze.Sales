// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace MyApi.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Message : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The appId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId { get; set; }
#nullable restore
#else
        public string AppId { get; set; }
#endif
        /// <summary>The badges property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::MyApi.Client.Models.Badge>? Badges { get; set; }
#nullable restore
#else
        public List<global::MyApi.Client.Models.Badge> Badges { get; set; }
#endif
        /// <summary>The content property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::MyApi.Client.Models.Message_content? Content { get; set; }
#nullable restore
#else
        public global::MyApi.Client.Models.Message_content Content { get; set; }
#endif
        /// <summary>The createdDate property</summary>
        public DateTimeOffset? CreatedDate { get; set; }
        /// <summary>The direction property</summary>
        public global::MyApi.Client.Models.Message_direction? Direction { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The sender property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::MyApi.Client.Models.Participant? Sender { get; set; }
#nullable restore
#else
        public global::MyApi.Client.Models.Participant Sender { get; set; }
#endif
        /// <summary>The sequence property</summary>
        public int? Sequence { get; set; }
        /// <summary>The sourceChannel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceChannel { get; set; }
#nullable restore
#else
        public string SourceChannel { get; set; }
#endif
        /// <summary>The targetChannels property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TargetChannels { get; set; }
#nullable restore
#else
        public List<string> TargetChannels { get; set; }
#endif
        /// <summary>The visibility property</summary>
        public global::MyApi.Client.Models.Message_visibility? Visibility { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::MyApi.Client.Models.Message"/> and sets the default values.
        /// </summary>
        public Message()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::MyApi.Client.Models.Message"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::MyApi.Client.Models.Message CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::MyApi.Client.Models.Message();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "appId", n => { AppId = n.GetStringValue(); } },
                { "badges", n => { Badges = n.GetCollectionOfObjectValues<global::MyApi.Client.Models.Badge>(global::MyApi.Client.Models.Badge.CreateFromDiscriminatorValue)?.AsList(); } },
                { "content", n => { Content = n.GetObjectValue<global::MyApi.Client.Models.Message_content>(global::MyApi.Client.Models.Message_content.CreateFromDiscriminatorValue); } },
                { "createdDate", n => { CreatedDate = n.GetDateTimeOffsetValue(); } },
                { "direction", n => { Direction = n.GetEnumValue<global::MyApi.Client.Models.Message_direction>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "sender", n => { Sender = n.GetObjectValue<global::MyApi.Client.Models.Participant>(global::MyApi.Client.Models.Participant.CreateFromDiscriminatorValue); } },
                { "sequence", n => { Sequence = n.GetIntValue(); } },
                { "sourceChannel", n => { SourceChannel = n.GetStringValue(); } },
                { "targetChannels", n => { TargetChannels = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "visibility", n => { Visibility = n.GetEnumValue<global::MyApi.Client.Models.Message_visibility>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("appId", AppId);
            writer.WriteCollectionOfObjectValues<global::MyApi.Client.Models.Badge>("badges", Badges);
            writer.WriteObjectValue<global::MyApi.Client.Models.Message_content>("content", Content);
            writer.WriteDateTimeOffsetValue("createdDate", CreatedDate);
            writer.WriteEnumValue<global::MyApi.Client.Models.Message_direction>("direction", Direction);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::MyApi.Client.Models.Participant>("sender", Sender);
            writer.WriteIntValue("sequence", Sequence);
            writer.WriteStringValue("sourceChannel", SourceChannel);
            writer.WriteCollectionOfPrimitiveValues<string>("targetChannels", TargetChannels);
            writer.WriteEnumValue<global::MyApi.Client.Models.Message_visibility>("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
