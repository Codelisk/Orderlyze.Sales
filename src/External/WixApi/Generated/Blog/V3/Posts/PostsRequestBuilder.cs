// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using MyApi.Client.Blog.V3.Posts.Item;
using MyApi.Client.Blog.V3.Posts.Slugs;
using MyApi.Client.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace MyApi.Client.Blog.V3.Posts
{
    /// <summary>
    /// Builds and executes requests for operations under \blog\v3\posts
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PostsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The slugs property</summary>
        public global::MyApi.Client.Blog.V3.Posts.Slugs.SlugsRequestBuilder Slugs
        {
            get => new global::MyApi.Client.Blog.V3.Posts.Slugs.SlugsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the MyApi.Client.blog.v3.posts.item collection</summary>
        /// <param name="position">The unique identifier of the blog post.</param>
        /// <returns>A <see cref="global::MyApi.Client.Blog.V3.Posts.Item.WithPostItemRequestBuilder"/></returns>
        public global::MyApi.Client.Blog.V3.Posts.Item.WithPostItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("postId", position);
                return new global::MyApi.Client.Blog.V3.Posts.Item.WithPostItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PostsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/blog/v3/posts{?Limit*,offset*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PostsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/blog/v3/posts{?Limit*,offset*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves a list of published blog posts (paged).
        /// </summary>
        /// <returns>A <see cref="global::MyApi.Client.Models.BlogPostList"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::MyApi.Client.Models.BlogPostList?> GetAsync(Action<RequestConfiguration<global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder.PostsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::MyApi.Client.Models.BlogPostList> GetAsync(Action<RequestConfiguration<global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder.PostsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::MyApi.Client.Models.BlogPostList>(requestInfo, global::MyApi.Client.Models.BlogPostList.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Query blog posts with filters and sorting. Supports retrieving draft posts or specific criteria.
        /// </summary>
        /// <returns>A <see cref="global::MyApi.Client.Models.BlogPostList"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::MyApi.Client.Models.BlogPostList?> PostAsync(global::MyApi.Client.Blog.V3.Posts.PostsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::MyApi.Client.Models.BlogPostList> PostAsync(global::MyApi.Client.Blog.V3.Posts.PostsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::MyApi.Client.Models.BlogPostList>(requestInfo, global::MyApi.Client.Models.BlogPostList.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves a list of published blog posts (paged).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder.PostsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder.PostsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Query blog posts with filters and sorting. Supports retrieving draft posts or specific criteria.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::MyApi.Client.Blog.V3.Posts.PostsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::MyApi.Client.Blog.V3.Posts.PostsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves a list of published blog posts (paged).
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PostsRequestBuilderGetQueryParameters 
        {
            /// <summary>Number of posts to retrieve (default 50).</summary>
            [QueryParameter("Limit")]
            public int? Limit { get; set; }
            /// <summary>Offset for pagination (default 0).</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PostsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::MyApi.Client.Blog.V3.Posts.PostsRequestBuilder.PostsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PostsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
