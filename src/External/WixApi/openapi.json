{
  "openapi": "3.0.3",
  "info": {
    "title": "Wix REST API",
    "description": "OpenAPI specification for Wix REST API covering Blog, Store (Products), Orders, Members, Contacts, Bookings, Events, Forms and other modules.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://www.wixapis.com",
      "description": "Wix API base URL for all endpoints"
    }
  ],
  "components": {
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://www.wix.com/oauth/authorize",
            "tokenUrl": "https://www.wix.com/oauth/access",
            "scopes": {
              "manage:site": "Full control of the Wix site data",
              "read:site": "Read-only access to the Wix site data"
            }
          }
        }
      },
      "APIKeyAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "API Key for site-level or account-level access. Include `wix-site-id` or `wix-account-id` header as appropriate."
      }
    },
    "schemas": {
      "BlogPost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Post ID (GUID)"
          },
          "title": { "type": "string" },
          "content": { "type": "string" },
          "publishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "author": { "type": "string" }
        }
      },
      "BlogPostList": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BlogPost" }
          },
          "paging": {
            "type": "object",
            "properties": {
              "limit": { "type": "integer" },
              "offset": { "type": "integer" },
              "next": { "type": "string" }
            }
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID (GUID)"
          },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "sku": { "type": "string" },
          "price": { "type": "number" },
          "inStock": { "type": "boolean" }
        }
      },
      "ProductList": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Product" }
          },
          "paging": {
            "type": "object",
            "properties": {
              "limit": { "type": "integer" },
              "offset": { "type": "integer" },
              "next": { "type": "string" }
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Order ID"
          },
          "number": {
            "type": "string",
            "description": "Order number"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "currency": { "type": "string" },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "productId": { "type": "string" },
                "name": { "type": "string" },
                "quantity": { "type": "integer" },
                "price": { "type": "number" }
              }
            }
          },
          "totalPrice": { "type": "number" },
          "status": { "type": "string" }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Member ID (GUID)"
          },
          "loginEmail": {
            "type": "string",
            "format": "email"
          },
          "status": {
            "type": "string",
            "description": "Member status (ACTIVE/BLOCKED/etc.)"
          },
          "contactId": {
            "type": "string",
            "description": "Linked Contact ID (GUID)"
          },
          "profile": {
            "type": "object",
            "properties": {
              "nickname": { "type": "string" },
              "picture": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Contact ID (GUID)"
          },
          "name": { "type": "string" },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": { "type": "string" },
          "labels": {
            "type": "array",
            "items": { "type": "string" }
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Booking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Booking ID"
          },
          "status": {
            "type": "string",
            "description": "Booking status (e.g. CONFIRMED, PENDING)"
          },
          "serviceId": { "type": "string" },
          "slot": {
            "type": "object",
            "properties": {
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "type": "string",
                "format": "date-time"
              },
              "timezone": { "type": "string" }
            }
          },
          "customer": {
            "type": "object",
            "properties": {
              "contactId": { "type": "string" },
              "name": { "type": "string" },
              "email": { "type": "string" }
            }
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Event ID (GUID)"
          },
          "title": { "type": "string" },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "location": { "type": "string" },
          "status": {
            "type": "string",
            "description": "Event status (DRAFT/PUBLISHED)"
          }
        }
      },
      "FormSubmission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Submission ID (GUID)"
          },
          "formId": {
            "type": "string",
            "description": "Form (namespace) ID"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "fields": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "description": "Submitted field values (keyed by field name or ID)"
          },
          "status": {
            "type": "string",
            "description": "Submission status (e.g., CONFIRMED)"
          }
        }
      }
    }
  },
  "security": [
    {
      "OAuth2": []
    },
    {
      "APIKeyAuth": []
    }
  ],
  "paths": {
    "/blog/v3/posts": {
      "get": {
        "tags": [ "Blog" ],
        "summary": "List Blog Posts",
        "description": "Retrieves a list of published blog posts (paged).",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of posts to retrieve (default 50).",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for pagination (default 0).",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of blog posts",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BlogPostList" }
              }
            }
          }
        }
      },
      "post": {
        "tags": [ "Blog" ],
        "summary": "Query Blog Posts",
        "description": "Query blog posts with filters and sorting. Supports retrieving draft posts or specific criteria.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Query filter and sort object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "object",
                    "description": "Filter conditions for posts"
                  },
                  "sort": {
                    "type": "object",
                    "description": "Sorting conditions"
                  },
                  "paging": {
                    "type": "object",
                    "properties": {
                      "limit": { "type": "integer" },
                      "offset": { "type": "integer" }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query results of blog posts",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BlogPostList" }
              }
            }
          }
        }
      }
    },
    "/blog/v3/posts/{postId}": {
      "get": {
        "tags": [ "Blog" ],
        "summary": "Get Blog Post",
        "description": "Retrieves a specific blog post by its ID.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The unique identifier of the blog post."
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BlogPost" }
              }
            }
          },
          "404": {
            "description": "Post not found"
          }
        }
      }
    },
    "/blog/v3/posts/slugs/{slug}": {
      "get": {
        "tags": [ "Blog" ],
        "summary": "Get Blog Post by Slug",
        "description": "Retrieves a blog post using its slug (SEO friendly URL identifier).",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Slug of the blog post (as seen in the post URL)."
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BlogPost" }
              }
            }
          },
          "404": {
            "description": "Post not found for given slug"
          }
        }
      }
    },
    "/stores/v1/products": {
      "post": {
        "tags": [ "Stores" ],
        "summary": "Create Product",
        "description": "Creates a new product in the Wix Stores catalog.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Product object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Product" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Product" }
              }
            }
          }
        }
      },
      "get": {
        "tags": [ "Stores" ],
        "summary": "List Products",
        "description": "Retrieves a list of products in the store catalog. Supports basic pagination or use the query endpoint for advanced filtering.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100
            },
            "description": "Maximum number of products to return."
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Offset for pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProductList" }
              }
            }
          }
        }
      }
    },
    "/stores/v1/products/query": {
      "post": {
        "tags": [ "Stores" ],
        "summary": "Query Products",
        "description": "Query the product catalog with filters (by name, price, etc.), sorting, and pagination.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Product query filter",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": { "type": "object" },
                  "sort": { "type": "object" },
                  "paging": {
                    "type": "object",
                    "properties": {
                      "limit": { "type": "integer" },
                      "offset": { "type": "integer" }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query results of products",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProductList" }
              }
            }
          }
        }
      }
    },
    "/stores/v1/products/{productId}": {
      "get": {
        "tags": [ "Stores" ],
        "summary": "Get Product",
        "description": "Retrieves a product by its ID.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Product" }
              }
            }
          },
          "404": { "description": "Product not found" }
        }
      },
      "put": {
        "tags": [ "Stores" ],
        "summary": "Update Product",
        "description": "Updates an existing product's information (fields that are writable via the API).",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Product ID"
          }
        ],
        "requestBody": {
          "description": "Product fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Product" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Product" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [ "Stores" ],
        "summary": "Delete Product",
        "description": "Deletes a product from the catalog.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Product ID"
          }
        ],
        "responses": {
          "204": { "description": "Product deleted successfully (no content)" },
          "404": { "description": "Product not found" }
        }
      }
    },
    "/ecom/v1/orders": {
      "post": {
        "tags": [ "Orders" ],
        "summary": "Create Order",
        "description": "Creates a new eCommerce order record.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Order object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Order" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          }
        }
      }
    },
    "/ecom/v1/orders/search": {
      "post": {
        "tags": [ "Orders" ],
        "summary": "Search Orders",
        "description": "Searches for orders matching the given criteria (filter by status, date, etc.).",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Order search filters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": { "type": "object" },
                  "sort": { "type": "object" },
                  "paging": {
                    "type": "object",
                    "properties": {
                      "limit": { "type": "integer" },
                      "offset": { "type": "integer" }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Order" }
                    },
                    "paging": {
                      "type": "object",
                      "properties": {
                        "next": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ecom/v1/orders/{orderId}": {
      "get": {
        "tags": [ "Orders" ],
        "summary": "Get Order",
        "description": "Retrieves an order by ID, including details of items, pricing, fulfillment, etc.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Order object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "404": { "description": "Order not found" }
        }
      },
      "patch": {
        "tags": [ "Orders" ],
        "summary": "Update Order",
        "description": "Updates allowed properties of an order (e.g. buyer information or certain status flags).",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Order ID"
          }
        ],
        "requestBody": {
          "description": "Order fields to update (only certain fields are accepted)",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Order" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "400": { "description": "Invalid update (e.g. disallowed field or value)" },
          "404": { "description": "Order not found" }
        }
      }
    },
    "/ecom/v1/orders/{orderId}/cancel": {
      "post": {
        "tags": [ "Orders" ],
        "summary": "Cancel Order",
        "description": "Cancels an order (if it has not been canceled already), typically setting its status to CANCELED and triggering related workflows.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Order ID to cancel"
          }
        ],
        "requestBody": {
          "description": "Cancellation details (optional reason)",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Order canceled successfully (no content)" },
          "404": { "description": "Order not found or already canceled" },
          "409": { "description": "Order cannot be canceled (e.g., already fulfilled)" }
        }
      }
    },
    "/members/v1/members": {
      "get": {
        "tags": [ "Members" ],
        "summary": "List Members",
        "description": "Lists site members. Supports pagination and field projection.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "Maximum number of members to return."
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Offset for pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "List of members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "members": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Member" }
                    },
                    "paging": {
                      "type": "object",
                      "properties": {
                        "next": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [ "Members" ],
        "summary": "Create Member",
        "description": "Creates a new member for the site. Typically used to invite a user or convert a contact into a member.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Member object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "loginEmail": {
                    "type": "string",
                    "format": "email"
                  },
                  "profile": {
                    "type": "object",
                    "properties": {
                      "nickname": { "type": "string" }
                    }
                  },
                  "contactDetails": {
                    "type": "object",
                    "description": "Optional contact info to link"
                  }
                },
                "required": [ "loginEmail" ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Member created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          },
          "409": { "description": "Email already in use or other conflict" }
        }
      }
    },
    "/members/v1/members/{memberId}": {
      "get": {
        "tags": [ "Members" ],
        "summary": "Get Member",
        "description": "Retrieves a site member by ID.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Member ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Member object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          },
          "404": { "description": "Member not found" }
        }
      },
      "patch": {
        "tags": [ "Members" ],
        "summary": "Update Member",
        "description": "Updates a member's information (e.g., profile details or status).",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Member ID"
          }
        ],
        "requestBody": {
          "description": "Member fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Member" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          },
          "404": { "description": "Member not found" }
        }
      },
      "delete": {
        "tags": [ "Members" ],
        "summary": "Delete Member",
        "description": "Removes a member from the site (the associated contact may remain).",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Member ID"
          }
        ],
        "responses": {
          "204": { "description": "Member deleted (no content)" },
          "404": { "description": "Member not found" }
        }
      }
    },
    "/contacts/v4/contacts": {
      "get": {
        "tags": [ "Contacts" ],
        "summary": "List Contacts",
        "description": "Lists contacts in the site's CRM (address book). Supports pagination.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contacts": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Contact" }
                    },
                    "paging": {
                      "type": "object",
                      "properties": {
                        "next": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [ "Contacts" ],
        "summary": "Create Contact",
        "description": "Creates a new contact in the site's CRM.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Contact object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "phone": { "type": "string" }
                },
                "required": [ "name" ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Contact" }
              }
            }
          }
        }
      }
    },
    "/contacts/v4/contacts/{contactId}": {
      "get": {
        "tags": [ "Contacts" ],
        "summary": "Get Contact",
        "description": "Retrieves a contact by ID.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Contact ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Contact" }
              }
            }
          },
          "404": { "description": "Contact not found" }
        }
      },
      "patch": {
        "tags": [ "Contacts" ],
        "summary": "Update Contact",
        "description": "Updates a contact's information.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Contact ID"
          }
        ],
        "requestBody": {
          "description": "Contact fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Contact" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Contact" }
              }
            }
          },
          "404": { "description": "Contact not found" }
        }
      },
      "delete": {
        "tags": [ "Contacts" ],
        "summary": "Delete Contact",
        "description": "Deletes a contact.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Contact ID"
          }
        ],
        "responses": {
          "204": { "description": "Contact deleted (no content)" },
          "404": { "description": "Contact not found" }
        }
      }
    },
    "/_api/bookings-service/v2/bookings": {
      "post": {
        "tags": [ "Bookings" ],
        "summary": "Create Booking",
        "description": "Creates a new booking (appointment or class enrollment).",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Booking object to create (including service, slot, and participant info)",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Booking" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Booking" }
              }
            }
          },
          "400": { "description": "Invalid booking (e.g. slot unavailable)" }
        }
      }
    },
    "/_api/bookings-service/v2/bookings/{bookingId}/cancel": {
      "post": {
        "tags": [ "Bookings" ],
        "summary": "Cancel Booking",
        "description": "Cancels an existing booking (if allowed by booking policy).",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Booking ID"
          }
        ],
        "requestBody": {
          "description": "Cancellation details (e.g., reason message to customer)",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sendCancellationEmail": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Booking canceled" },
          "404": { "description": "Booking not found or already canceled" }
        }
      }
    },
    "/_api/bookings-service/v2/bookings/{bookingId}/confirm": {
      "post": {
        "tags": [ "Bookings" ],
        "summary": "Confirm Booking",
        "description": "Confirms a pending booking (if the service requires manual confirmation).",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Booking ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking confirmed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Booking" }
              }
            }
          },
          "404": { "description": "Booking not found" },
          "409": { "description": "Booking cannot be confirmed (e.g., already confirmed or canceled)" }
        }
      }
    },
    "/events/v3/events": {
      "get": {
        "tags": [ "Events" ],
        "summary": "List Events",
        "description": "Lists events on the site (e.g., upcoming events).",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Event" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [ "Events" ],
        "summary": "Create Event",
        "description": "Creates a new event.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Event object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Event" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          }
        }
      }
    },
    "/events/v3/events/{eventId}": {
      "get": {
        "tags": [ "Events" ],
        "summary": "Get Event",
        "description": "Retrieves an event by its ID.",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Event ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Event object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          },
          "404": { "description": "Event not found" }
        }
      },
      "patch": {
        "tags": [ "Events" ],
        "summary": "Update Event",
        "description": "Updates an event's details.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Event ID"
          }
        ],
        "requestBody": {
          "description": "Event fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Event" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event updated",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          },
          "404": { "description": "Event not found" }
        }
      },
      "delete": {
        "tags": [ "Events" ],
        "summary": "Delete Event",
        "description": "Deletes an event.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Event ID"
          }
        ],
        "responses": {
          "204": { "description": "Event deleted" },
          "404": { "description": "Event not found" }
        }
      }
    },
    "/events/v1/events/{eventId}/orders/confirm": {
      "post": {
        "tags": [ "Events" ],
        "summary": "Confirm Event Order",
        "description": "Confirms an order (ticket purchase) for the specified event. Typically used for approving orders awaiting manual confirmation.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Event ID"
          }
        ],
        "responses": {
          "204": { "description": "Order confirmed" },
          "404": { "description": "Event or order not found" }
        }
      }
    },
    "/form-submission-service/v4/submissions": {
      "post": {
        "tags": [ "Forms" ],
        "summary": "Create Form Submission",
        "description": "Manually creates (injects) a new form submission for a Wix Form.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Submission data to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FormSubmission" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Submission created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FormSubmission" }
              }
            }
          },
          "404": { "description": "Form (namespace) not found or not installed" }
        }
      }
    },
    "/form-submission-service/v4/submissions/{submissionId}": {
      "get": {
        "tags": [ "Forms" ],
        "summary": "Get Form Submission",
        "description": "Retrieves a specific form submission by ID (for Wix Forms).",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Submission ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Form submission object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FormSubmission" }
              }
            }
          },
          "404": { "description": "Submission not found" }
        }
      },
      "delete": {
        "tags": [ "Forms" ],
        "summary": "Delete Form Submission",
        "description": "Deletes a form submission.",
        "security": [
          { "OAuth2": [ "manage:site" ] },
          { "APIKeyAuth": [] }
        ],
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Submission ID"
          }
        ],
        "responses": {
          "204": { "description": "Submission deleted" },
          "404": { "description": "Submission not found" }
        }
      }
    },
    "/form-submission-service/v4/submissions/query": {
      "post": {
        "tags": [ "Forms" ],
        "summary": "Query Form Submissions",
        "description": "Query form submissions for a specific form (namespace) with optional filters (e.g., by date or status).",
        "security": [
          { "OAuth2": [ "read:site" ] },
          { "APIKeyAuth": [] }
        ],
        "requestBody": {
          "description": "Query criteria (including form identifier and filters)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "formId": {
                    "type": "string",
                    "description": "Form (namespace) ID to filter submissions"
                  },
                  "filter": { "type": "object" },
                  "paging": {
                    "type": "object",
                    "properties": {
                      "limit": { "type": "integer" },
                      "offset": { "type": "integer" }
                    }
                  }
                },
                "required": [ "formId" ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Query results of submissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "submissions": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/FormSubmission" }
                    },
                    "paging": {
                      "type": "object",
                      "properties": {
                        "next": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
